DogMatch – Specification Document (First Partial)
This document describes the project DogMatch, developed as part of the first partial for the subject Mobile Devices Programming SIS3403. The delivery of this partial consists only of the backend, developed in Flask (Python), with a MySQL cloud database and deployment on Render.
1. Objective
DogMatch is a 'Tinder for dogs' style application that connects dog owners and shelters so that their pets can socialize, find companionship, or be adopted, offering a fun and safe experience.
2. Users
- Standard Owner: creates one or more dog profiles, performs swipes, and chats.
- Shelter/NGO: publishes dogs for adoption and receives contacts.
- Administrator: moderates profiles, reviews reports, and manages metrics.
3. Content
- User and dog profiles (name, age, photos, preferences).
- Discovery cards for swipe functionality.
- Chats between users when there is a match.
- Adoption section.
- Events section: Users can discover, register, and pay for dog-related events such as meetups, training workshops, or adoption fairs. This feature allows users to participate in community events, bringing together dog lovers in real life.
4. Database
- MySQL (in the cloud): tables for users, dogs, matches, messages, photos (URLs), and events.
- Photos will be stored in an S3/Blob Storage service or in a test folder for the partial.
- Full CRUD in Flask: create, read, update, and delete users, dogs, matches, and events.
Recommended Adjustments for the First Partial
- Backend focused on Flask + MySQL.
- Authentication with JWT and refresh tokens.
- Redis and Socket.IO documented as future improvements for real-time chat and caching.
- Deployment on Render with public GitHub repository.
- User stories and Kanban board in Trello.
Redis and Socket.IO – Quick Analysis
- Redis: free plan available in Render/Redis Cloud. Can be used later for caching and queues, not required in this partial.
- Socket.IO: requires integration with Flask-SocketIO and WebSockets, proposed as a future improvement for real-time chat.
Suggested Deliverables
1. Public GitHub repository with Flask backend.
2. Functional deployment on Render.
3. User stories and Kanban board in Trello.
4. Video of maximum 5 minutes explaining the backend and tests in Postman.
5. PDF document with the above points.
Suggested Project Description for ChatGPT
Backend project in Flask (Python) with MySQL in the cloud, oriented to a mobile app in React Native. DogMatch allows dog owners and shelters to create pet profiles, swipe to find matches, chat, and join events. Includes JWT for authentication, full CRUD, and deployment in Render. Redis and Socket.IO are proposed as a second phase for real-time chat.
